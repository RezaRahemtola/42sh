{
    "tests" : [
        {
            "name": "errors - Unknown command",
            "command": "nocommand"
        },
        {
            "name": "errors - Permission denied",
            "command": "tests/samples/perms_denied"
        },
        {
            "name": "errors - Segfault (core dumped)",
            "command": "tests/samples/segfault_coredumped"
        },
        {
            "name": "errors - Division by 0",
            "command": "tests/samples/div_zero"
        },
        {
            "name": "errors - Corrupted file",
            "command": "tests/samples/corrupted"
        },
        {
            "name": "ls - simple",
            "command": "ls"
        },
        {
            "name": "ls - with option",
            "command": "ls -la"
        },
        {
            "name": "ls - complicated",
            "command": "ls -la /dev"
        },
        {
            "name": "ls - with spaces",
            "command": "   ls   -la    /dev            "
        },
        {
            "name": "ls - with spaces and tabs",
            "command": "\t   ls  \t -la  \t  /dev      \t      "
        },
        {
            "name": "ls - Inexistant file",
            "command": "ls nofile"
        },
        {
            "name": "cd - simple",
            "command": "cd /"
        },
        {
            "name": "cd - Too many arguments",
            "command": "cd / / / / /"
        },
        {
            "name": "cd - Inexistant directory",
            "command": "cd /nothing"
        },
        {
            "name": "cd - Not a directory",
            "command": "cd config.json"
        },
        {
            "name": "cd - Previous with too many arguments",
            "command": "cd -args"
        },
        {
            "name": "env - simple",
            "command": "env | grep PATH"
        },
        {
            "name": "setenv - simple",
            "command": "setenv var val"
        },
        {
            "name": "setenv - No argument",
            "command": "setenv | grep HOME"
        },
        {
            "name": "setenv - Too many arguments",
            "command": "setenv too many arguments"
        },
        {
            "name": "setenv - Var starting with non-letter char",
            "command": "setenv 1var val"
        },
        {
            "name": "setenv - Var with non alphanumeric char",
            "command": "setenv var-var val"
        },
        {
            "name": "unsetenv - simple",
            "command": "unsetenv PATH"
        },
        {
            "name": "unsetenv - simple with checks",
            "command": "env | grep PATH ; unsetenv PATH ; env | grep PATH"
        },
        {
            "name": "unsetenv - No argument",
            "command": "unsetenv"
        },
        {
            "name": "unsetenv - simple all",
            "command": "unsetenv *"
        },
        {
            "name": "unsetenv - simple all with checks",
            "command": "env | grep PATH ; unsetenv * ; env"
        },
        {
            "name": "unsetenv - complex all",
            "command": "unsetenv PATH * notAvar"
        },
        {
            "name": "set - Var starting with non-letter char",
            "command": "set 1var = val"
        },
        {
            "name": "set - Var with non alphanumeric char",
            "command": "set var-var = val"
        },
        {
            "name": "set - Multiple variables with non alphanumeric char",
            "command": "set var1 var2 var3 wrong-var"
        },
        {
            "name": "set - Display read-only",
            "command": "set -r"
        },
        {
            "name": "set - Set single read-only",
            "command": "set -r myvar = val"
        },
        {
            "name": "set - Set single read-only with checks",
            "command": "set -r myvar = val ; set -r"
        },
        {
            "name": "set - Multiple read-only",
            "command": "set -r myvar myvar2 myvar3"
        },
        {
            "name": "set - Multiple read-only with checks",
            "command": "set -r myvar myvar2 myvar3 ; set -r"
        },
        {
            "name": "set - Edit single read-only",
            "command": "set -r myvar ; set myvar = val ; set -r"
        },
        {
            "name": "set - Edit multiple read-only",
            "command": "set -r myvar ; set -r myvar2 myvar ; set -r"
        },
        {
            "name": "unset - No argument",
            "command": "unset"
        },
        {
            "name": "unset - Non existing var",
            "command": "unset novar"
        },
        {
            "name": "unset - Multiple non existing var",
            "command": "unset novar novar2 novar3"
        },
        {
            "name": "unset - Readonly var",
            "command": "set -r myvar ; unset myvar"
        },
        {
            "name": "unset - Multiple read-only",
            "command": "set -r myvar ; set myvar2 ; unset myvar2 myvar ; set -r ; set | grep myvar2"
        },
        {
            "name": "exit - simple",
            "command": "exit"
        },
        {
            "name": "exit - with value",
            "command": "exit 42"
        },
        {
            "name": "exit - Too many arguments",
            "command": "exit 42 42"
        },
        {
            "name": "exit - Value > 256",
            "command": "exit 298"
        },
        {
            "name": "exit - Non integer value",
            "command": "exit NaN"
        },
        {
            "name": "exit - Badly formed number",
            "command": "exit 42NaN"
        },
        {
            "name": "recursion - 42sh in 42sh",
            "command": "42sh"
        },
        {
            "name": "semicolon - simple",
            "command": "ls -la; cat Makefile"
        },
        {
            "name": "semicolon - exit in the middle",
            "command": "ls -la; exit 42; cat Makefile"
        },
        {
            "name": "semicolon - without first",
            "command": "; cat Makefile"
        },
        {
            "name": "semicolon - without last",
            "command": "ls -la; "
        },
        {
            "name": "semicolon - empty",
            "command": ";; ;    ; \t ;"
        },
        {
            "name": "redir - (>) simple",
            "command": "ls -la > output.txt ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>) options after",
            "command": "ls > output.txt -la ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>) beginning of str",
            "command": "> output.txt ls -la ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>) no filename",
            "command": "ls -la >"
        },
        {
            "name": "redir - (>) permission denied",
            "command": "echo test > /etc/sudoers"
        },
        {
            "name": "redir - (>>) simple",
            "command": "echo lol > output.txt ; ls -la >> output.txt ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>>) options after",
            "command": "echo test > output.txt ; ls -a >> output.txt --list ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>>) beginning of str",
            "command": "> output.txt echo test ; >> output.txt ls -la ; cat output.txt ; rm output.txt"
        },
        {
            "name": "redir - (>>) no filename",
            "command": "echo test >>  \t "
        },
        {
            "name": "redir - (>>) permission denied",
            "command": "echo test >> /etc/sudoers"
        },
        {
            "name": "redir - (<) simple",
            "command": "grep my < Makefile"
        },
        {
            "name": "redir - (<) options after",
            "command": "grep my < Makefile -i"
        },
        {
            "name": "redir - (<) beginning of str",
            "command": "< Makefile grep my -i"
        },
        {
            "name": "redir - (<) no filename",
            "command": "grep test < \t "
        },
        {
            "name": "redir - (<) permission denied",
            "command": "grep root < /etc/sudoers"
        },
        {
            "name": "redir - (<<) no string",
            "command": "grep test <<  \t "
        },
        {
            "name": "&& - no left",
            "command": "&& ls"
        },
        {
            "name": "&& - no right",
            "command": "ls &&"
        },
        {
            "name": "&& - no commands",
            "command": "&&"
        },
        {
            "name": "&& - simple",
            "command": "ls && ls"
        },
        {
            "name": "&& - simple with builtin",
            "command": "env > /dev/null && echo OK"
        },
        {
            "name": "&& - simple with builtin failed",
            "command": "exit NaN && echo 'not displayed'"
        },
        {
            "name": "&& - failed left",
            "command": "nocommand && ls"
        },
        {
            "name": "&& - several with middle fail",
            "command": "ls && nocommand && ls"
        },
        {
            "name": "|| - no left",
            "command": "|| ls"
        },
        {
            "name": "|| - no right",
            "command": "ls ||"
        },
        {
            "name": "|| - no commands",
            "command": "||"
        },
        {
            "name": "|| - simple",
            "command": "ls || ls"
        },
        {
            "name": "|| - simple with builtin",
            "command": "cd / || echo 'not displayed'"
        },
        {
            "name": "|| - simple with builtin failed",
            "command": "unset || echo OK"
        },
        {
            "name": "|| - failed left",
            "command": "nocommand || ls"
        },
        {
            "name": "|| - several with middle success",
            "command": "nocommand && ls && nocommand"
        },
        {
            "name": "operators - Mixed && and ||",
            "command": "echo One || echo Two && echo Three || echo Four"
        },
        {
            "name": "operators - Mixed &&, || and |",
            "command": "echo One && echo Two || echo Three | echo Four"
        },
        {
            "name": "pipes - no right",
            "command": "cat -e Makefile |"
        },
        {
            "name": "pipes - no left",
            "command": "| grep test"
        },
        {
            "name": "pipes - no commands",
            "command": "|"
        },
        {
            "name": "pipes - simple",
            "command": "cat Makefile | grep test"
        },
        {
            "name": "pipes - unknown right",
            "command": "ls | unknowncommand"
        },
        {
            "name": "pipes - simple with builtin",
            "command": "env | grep HOME"
        },
        {
            "name": "pipes - complex",
            "command": "cat Makefile | grep test | wc -l"
        },
        {
            "name": "pipes - complex with builtin",
            "command": "env | grep HOME | wc -l"
        },
        {
            "name": "! - no command without history",
            "command": "! command"
        },
        {
            "name": "! - no command with history",
            "command": "ls \n ! ls"
        },
        {
            "name": "alias - Invalid name 'alias'",
            "command": "alias alias value"
        },
        {
            "name": "alias - Invalid name 'unalias'",
            "command": "alias unalias value"
        },
        {
            "name": "alias - Multiple values",
            "command": "alias myalias value1 value2 value3"
        },
        {
            "name": "alias - Multiple values with checks",
            "command": "alias myalias value1 value2 value3 ; alias | grep myalias"
        },
        {
            "name": "unalias - simple",
            "command": "alias myalias value ; unalias myalias"
        },
        {
            "name": "unalias - Non existing alias",
            "command": "unalias notanalias"
        },
        {
            "name": "unalias - all",
            "command": "unalias * ; alias"
        },
        {
            "name": "tilde - Printing",
            "command": "echo ~ ; echo $home"
        },
        {
            "name": "tilde - Basic",
            "command": "echo ~ ; ls ~"
        },
        {
            "name": "tilde - Continued",
            "command": "ls ~/Downloads"
        },
        {
            "name": "tilde - No tilde",
            "command": "unset home ; ls ~/Downloads"
        },
        {
            "name": "tilde - Executing next",
            "command": "unset home ; ls ~ ; echo still done"
        },
        {
            "name": "variables - Printing values",
            "command": "echo $home $?home"
        },
        {
            "name": "variables - Not existing",
            "command": "echo $bonsoir"
        },
        {
            "name": "variables - Test variable not existing",
            "command": "echo $?bonsoir"
        },
        {
            "name": "variables - Not executing next",
            "command": "echo $bonsoir ; echo not executed"
        },
        {
            "name": "variables - Concatenated variables",
            "command": "set TEST = test; echo $TEST$TEST"
        },
        {
            "name": "mysh2 - subject example",
            "command": "ls -l; ls -l | wc -l"
        },
        {
            "name": "mysh2 - subject example complex",
            "command": "mkdir folder ; cd folder ; ls -a ; ls | cat | wc -c ; cd .. ; rm -r folder"
        },
        {
            "name": "42sh - subject example",
            "command": "cd ; </etc/hosts od -c | grep xx | wc >> /tmp/z -l ; cd - && echo OK"
        }
    ]
}
